Backport of:

From f99912beeaf230ee3634b938d3ea426ffd1f3e57 Mon Sep 17 00:00:00 2001
From: SethMichaelLarson <sethmichaellarson@protonmail.com>
Date: Sun, 25 Mar 2018 20:30:47 -0500
Subject: [PATCH] Add Authentication strip logic to ConnectionPool

---
 test/with_dummyserver/test_connectionpool.py |   33 ++++++++++++++++++++++++++-
 urllib3/connectionpool.py                    |    8 ++++++
 2 files changed, 40 insertions(+), 1 deletion(-)

--- a/test/with_dummyserver/test_connectionpool.py
+++ b/test/with_dummyserver/test_connectionpool.py
@@ -4,6 +4,7 @@ import socket
 import sys
 import unittest
 import time
+import json
 
 import mock
 
@@ -15,7 +16,10 @@ except:
 from .. import (
     requires_network,
     onlyPy3, onlyPy27OrNewer, onlyPy26OrOlder,
-    TARPIT_HOST, VALID_SOURCE_ADDRESSES, INVALID_SOURCE_ADDRESSES,
+    TARPIT_HOST,
+    VALID_SOURCE_ADDRESSES,
+    INVALID_SOURCE_ADDRESSES,
+    requires_network,
 )
 from ..port_helpers import find_unused_port
 from urllib3 import (
@@ -619,6 +623,8 @@ class TestRetry(HTTPDummyServerTestCase)
     def setUp(self):
         self.pool = HTTPConnectionPool(self.host, self.port)
 
+        self.base_url_alt = 'http://%s:%d' % (self.host_alt, self.port)
+
     def test_max_retry(self):
         try:
             r = self.pool.request('GET', '/redirect',
@@ -701,6 +707,31 @@ class TestRetry(HTTPDummyServerTestCase)
                                  headers=headers, retries=retry)
         self.assertEqual(resp.status, 200)
 
+    def test_redirect_cross_host_no_forward_auth_headers(self):
+        url = '/redirect?target=%s/headers' % self.base_url_alt
+        headers = {'Authentication': 'foo'}
+
+        resp = self.pool.urlopen('GET', url, headers=headers, assert_same_host=False)
+
+        self.assertEqual(resp.status, 200)
+
+        data = json.loads(resp.data.decode('utf-8'))
+
+        self.assertNotIn('Authentication', data)
+
+    def test_redirect_cross_host_forward_auth_headers(self):
+        url = '/redirect?target=%s/headers' % self.base_url_alt
+        headers = {'Authentication': 'foo'}
+        retry = Retry(redirect=2, forward_auth_headers_across_hosts=True)
+
+        resp = self.pool.urlopen('GET', url, headers=headers, assert_same_host=False, retries=retry)
+
+        self.assertEqual(resp.status, 200)
+
+        data = json.loads(resp.data.decode('utf-8'))
+
+        self.assertEqual(data['Authentication'], 'foo')
+
 
 if __name__ == '__main__':
     unittest.main()
--- a/urllib3/connectionpool.py
+++ b/urllib3/connectionpool.py
@@ -591,6 +591,14 @@ class HTTPConnectionPool(ConnectionPool,
                     raise
                 return response
 
+            # Strip the Authentication header if redirecting to a new host
+            # and we don't want to forward that header across hosts.
+            if (not retries.forward_auth_headers_across_hosts
+                    and 'Authentication' in headers
+                    and not self.is_same_host(redirect_location)):
+                headers.pop('Authentication')
+
+
             log.info("Redirecting %s -> %s" % (url, redirect_location))
             return self.urlopen(method, redirect_location, body, headers,
                     retries=retries, redirect=redirect,
