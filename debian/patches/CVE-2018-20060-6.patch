From 9c9dd6f3014e89bb9c532b641abcf1b24c3896ab Mon Sep 17 00:00:00 2001
From: lars4839 <sethmichaellarson@protonmail.com>
Date: Mon, 26 Mar 2018 20:33:19 -0500
Subject: [PATCH] Switch to Retry.remove_headers_on_redirect

- Default to Authorization header.
- Allow different settings on the Retry object.
- Remove logic from ConnectionPool.
---
 test/test_retry.py                           |   10 +++++++
 test/with_dummyserver/test_connectionpool.py |   36 ---------------------------
 test/with_dummyserver/test_poolmanager.py    |   31 ++++++++++++++++++-----
 urllib3/connectionpool.py                    |    8 ------
 urllib3/poolmanager.py                       |   10 +++----
 urllib3/util/retry.py                        |   19 ++++++++------
 6 files changed, 51 insertions(+), 63 deletions(-)


--- a/test/test_retry.py
+++ b/test/test_retry.py
@@ -154,3 +154,13 @@ class RetryTest(unittest.TestCase):
     def test_disabled(self):
         self.assertRaises(MaxRetryError, Retry(-1).increment)
         self.assertRaises(MaxRetryError, Retry(0).increment)
+
+    def test_retry_default_remove_headers_on_redirect(self):
+        retry = Retry()
+
+        assert list(retry.remove_headers_on_redirect) == ['Authorization']
+
+    def test_retry_set_remove_headers_on_redirect(self):
+        retry = Retry(remove_headers_on_redirect=['X-API-Secret'])
+
+        assert list(retry.remove_headers_on_redirect) == ['X-API-Secret']
--- a/test/with_dummyserver/test_connectionpool.py
+++ b/test/with_dummyserver/test_connectionpool.py
@@ -4,7 +4,6 @@ import socket
 import sys
 import unittest
 import time
-import json
 
 import mock
 
@@ -16,9 +15,7 @@ except:
 from .. import (
     requires_network,
     onlyPy3, onlyPy27OrNewer, onlyPy26OrOlder,
-    TARPIT_HOST,
-    VALID_SOURCE_ADDRESSES,
-    INVALID_SOURCE_ADDRESSES
+    TARPIT_HOST, VALID_SOURCE_ADDRESSES, INVALID_SOURCE_ADDRESSES,
 )
 from ..port_helpers import find_unused_port
 from urllib3 import (
@@ -622,8 +619,6 @@ class TestRetry(HTTPDummyServerTestCase)
     def setUp(self):
         self.pool = HTTPConnectionPool(self.host, self.port)
 
-        self.base_url_alt = 'http://%s:%d' % (self.host_alt, self.port)
-
     def test_max_retry(self):
         try:
             r = self.pool.request('GET', '/redirect',
@@ -706,35 +701,6 @@ class TestRetry(HTTPDummyServerTestCase)
                                  headers=headers, retries=retry)
         self.assertEqual(resp.status, 200)
 
-    def test_redirect_cross_host_no_forward_auth_headers(self):
-        url = '/redirect?target=%s/headers' % self.base_url_alt
-        headers = {'Authentication': 'foo'}
-
-        resp = self.pool.urlopen('GET', url, headers=headers, assert_same_host=False)
-
-        self.assertEqual(resp.status, 200)
-
-        data = json.loads(resp.data.decode('utf-8'))
-
-        self.assertNotIn('Authentication', data)
-
-    def test_redirect_cross_host_forward_auth_headers(self):
-        url = '/redirect?target=%s/headers' % self.base_url_alt
-        headers = {'Authentication': 'foo'}
-        retry = Retry(redirect=2, forward_auth_headers_across_hosts=True)
-
-        resp = self.pool.urlopen(
-            'GET', url, headers=headers,
-            assert_same_host=False,
-            retries=retry
-        )
-
-        self.assertEqual(resp.status, 200)
-
-        data = json.loads(resp.data.decode('utf-8'))
-
-        self.assertEqual(data['Authentication'], 'foo')
-
 
 if __name__ == '__main__':
     unittest.main()
--- a/test/with_dummyserver/test_poolmanager.py
+++ b/test/with_dummyserver/test_poolmanager.py
@@ -79,34 +79,51 @@ class TestPoolManager(HTTPDummyServerTes
 
         self.assertEqual(r._pool.host, self.host_alt)
 
-    def test_redirect_cross_host_strip_auth_headers(self):
+    def test_redirect_cross_host_remove_headers(self):
         http = PoolManager()
         self.addCleanup(http.clear)
 
         r = http.request('GET', '%s/redirect' % self.base_url,
                          fields={'target': '%s/headers' % self.base_url_alt},
-                         headers={'Authentication': 'foo'})
+                         headers={'Authorization': 'foo'})
 
         self.assertEqual(r.status, 200)
 
         data = json.loads(r.data.decode('utf-8'))
 
-        self.assertNotIn('Authentication', data)
+        self.assertNotIn('Authorization', data)
 
-    def test_redirect_cross_host_forward_auth_headers(self):
+    def test_redirect_cross_host_no_remove_headers(self):
         http = PoolManager()
         self.addCleanup(http.clear)
 
         r = http.request('GET', '%s/redirect' % self.base_url,
                          fields={'target': '%s/headers' % self.base_url_alt},
-                         headers={'Authentication': 'foo'},
-                         retries=Retry(forward_auth_headers_across_hosts=True))
+                         headers={'Authorization': 'foo'},
+                         retries=Retry(remove_headers_on_redirect=[]))
 
         self.assertEqual(r.status, 200)
 
         data = json.loads(r.data.decode('utf-8'))
 
-        self.assertEqual(data['Authentication'], 'foo')
+        self.assertEqual(data['Authorization'], 'foo')
+
+    def test_redirect_cross_host_set_removed_headers(self):
+        http = PoolManager()
+        self.addCleanup(http.clear)
+
+        r = http.request('GET', '%s/redirect' % self.base_url,
+                         fields={'target': '%s/headers' % self.base_url_alt},
+                         headers={'X-API-Secret': 'foo',
+                                  'Authorization': 'bar'},
+                         retries=Retry(remove_headers_on_redirect=['X-API-Secret']))
+
+        self.assertEqual(r.status, 200)
+
+        data = json.loads(r.data.decode('utf-8'))
+
+        self.assertNotIn('X-API-Secret', data)
+        self.assertEqual(data['Authorization'], 'bar')
 
     def test_missing_port(self):
         # Can a URL that lacks an explicit port like ':80' succeed, or
--- a/urllib3/connectionpool.py
+++ b/urllib3/connectionpool.py
@@ -591,14 +591,6 @@ class HTTPConnectionPool(ConnectionPool,
                     raise
                 return response
 
-            # Strip the Authentication header if redirecting to a new host
-            # and we don't want to forward that header across hosts.
-            if (not retries.forward_auth_headers_across_hosts
-                    and 'Authentication' in headers
-                    and not self.is_same_host(redirect_location)):
-                headers.pop('Authentication')
-
-
             log.info("Redirecting %s -> %s" % (url, redirect_location))
             return self.urlopen(method, redirect_location, body, headers,
                     retries=retries, redirect=redirect,
--- a/urllib3/poolmanager.py
+++ b/urllib3/poolmanager.py
@@ -170,12 +170,12 @@ class PoolManager(RequestMethods):
         if not isinstance(retries, Retry):
             retries = Retry.from_int(retries, redirect=redirect)
 
-        # Strip the Authentication header if redirecting to a new host
-        # and we don't want to forward that header across hosts.
-        if (not retries.forward_auth_headers_across_hosts
-                and 'Authentication' in headers
+        # Strip headers marked as unsafe to forward to the redirected location.
+        if (retries.remove_headers_on_redirect
                 and not conn.is_same_host(redirect_location)):
-            headers.pop('Authentication')
+            for header in retries.remove_headers_on_redirect:
+                if header in headers:
+                    headers.pop(header)
 
         kw['retries'] = retries.increment(method, redirect_location)
         kw['redirect'] = redirect
--- a/urllib3/util/retry.py
+++ b/urllib3/util/retry.py
@@ -102,10 +102,10 @@ class Retry(object):
         exhausted, to raise a MaxRetryError, or to return a response with a
         response code in the 3xx range.
 
-    :param bool forward_auth_headers_across_hosts:
-        Whether to forward Authentication headers if a response is received
-        that redirects to a different host than the original request.
-        Defaults to False.
+    :param iterable remove_headers_on_redirect:
+        Sequence of headers to remove from the request when a response
+        indicating a redirect is returned before firing off the redirected
+        request.
     """
 
     DEFAULT_METHOD_WHITELIST = frozenset([
@@ -117,7 +117,7 @@ class Retry(object):
     def __init__(self, total=10, connect=None, read=None, redirect=None,
                  method_whitelist=DEFAULT_METHOD_WHITELIST, status_forcelist=None,
                  backoff_factor=0, raise_on_redirect=True, _observed_errors=0,
-                 forward_auth_headers_across_hosts=False):
+                 remove_headers_on_redirect=None):
 
         self.total = total
         self.connect = connect
@@ -127,14 +127,17 @@ class Retry(object):
             redirect = 0
             raise_on_redirect = False
 
+        if remove_headers_on_redirect is None:
+            remove_headers_on_redirect = ['Authorization']
+        remove_headers_on_redirect = set(remove_headers_on_redirect)
+
         self.redirect = redirect
         self.status_forcelist = status_forcelist or set()
         self.method_whitelist = method_whitelist
         self.backoff_factor = backoff_factor
         self.raise_on_redirect = raise_on_redirect
         self._observed_errors = _observed_errors # TODO: use .history instead?
-        self.forward_auth_headers_across_hosts = \
-            forward_auth_headers_across_hosts
+        self.remove_headers_on_redirect = remove_headers_on_redirect
 
     def new(self, **kw):
         params = dict(
@@ -145,7 +148,7 @@ class Retry(object):
             backoff_factor=self.backoff_factor,
             raise_on_redirect=self.raise_on_redirect,
             _observed_errors=self._observed_errors,
-            forward_auth_headers_across_hosts=self.forward_auth_headers_across_hosts
+            remove_headers_on_redirect=self.remove_headers_on_redirect
         )
         params.update(kw)
         return type(self)(**params)
