From: YOSHIDA Katsuhiko <claddvd@gmail.com>
Date: Sun, 30 Dec 2018 07:41:54 +0900
Subject: Remove Authorization headers regardless of case on cross-origin
 redirects

Origin: https://github.com/urllib3/urllib3/commit/adb358f8e06865406d1f05e581a16cbea2136fbc
Bug: https://github.com/urllib3/urllib3/issues/1510
Bug-Debian: https://security-tracker.debian.org/tracker/CVE-2018-25091
---
 test/test_retry.py                        |    4 ++--
 test/with_dummyserver/test_poolmanager.py |   25 +++++++++++++++++++++++++
 urllib3/poolmanager.py                    |    7 +++++--
 urllib3/util/retry.py                     |    3 ++-
 4 files changed, 34 insertions(+), 5 deletions(-)

--- a/urllib3/poolmanager.py
+++ b/urllib3/poolmanager.py
@@ -9,6 +9,7 @@ from ._collections import RecentlyUsedCo
 from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool
 from .connectionpool import port_by_scheme
 from .exceptions import LocationValueError
+import six
 from .request import RequestMethods
 from .util.url import parse_url
 from .util.retry import Retry
@@ -173,8 +174,10 @@ class PoolManager(RequestMethods):
         # conn.is_same_host() which may use socket.gethostbyname() in the future.
         if (retries.remove_headers_on_redirect
                 and not conn.is_same_host(redirect_location)):
-            for header in retries.remove_headers_on_redirect:
-                kw['headers'].pop(header, None)
+            headers = list(six.iterkeys(kw['headers']))
+            for header in headers:
+                if header.lower() in retries.remove_headers_on_redirect:
+                    kw['headers'].pop(header, None)
 
         kw['retries'] = retries.increment(method, redirect_location)
         kw['redirect'] = redirect
--- a/urllib3/util/retry.py
+++ b/urllib3/util/retry.py
@@ -135,7 +135,8 @@ class Retry(object):
         self.backoff_factor = backoff_factor
         self.raise_on_redirect = raise_on_redirect
         self._observed_errors = _observed_errors # TODO: use .history instead?
-        self.remove_headers_on_redirect = remove_headers_on_redirect
+        self.remove_headers_on_redirect = frozenset([
+            h.lower() for h in remove_headers_on_redirect])
 
     def new(self, **kw):
         params = dict(
--- a/test/test_retry.py
+++ b/test/test_retry.py
@@ -158,9 +158,9 @@ class RetryTest(unittest.TestCase):
     def test_retry_default_remove_headers_on_redirect(self):
         retry = Retry()
 
-        assert list(retry.remove_headers_on_redirect) == ['Authorization']
+        assert list(retry.remove_headers_on_redirect) == ['authorization']
 
     def test_retry_set_remove_headers_on_redirect(self):
         retry = Retry(remove_headers_on_redirect=['X-API-Secret'])
 
-        assert list(retry.remove_headers_on_redirect) == ['X-API-Secret']
+        assert list(retry.remove_headers_on_redirect) == ['x-api-secret']
--- a/test/with_dummyserver/test_poolmanager.py
+++ b/test/with_dummyserver/test_poolmanager.py
@@ -93,6 +93,17 @@ class TestPoolManager(HTTPDummyServerTes
 
         self.assertNotIn('Authorization', data)
 
+        r = http.request('GET', '%s/redirect' % self.base_url,
+                         fields={'target': '%s/headers' % self.base_url_alt},
+                         headers={'authorization': 'foo'})
+
+        self.assertEqual(r.status, 200)
+
+        data = json.loads(r.data.decode('utf-8'))
+
+        self.assertNotIn('authorization', data)
+        self.assertNotIn('Authorization', data)
+
     def test_redirect_cross_host_no_remove_headers(self):
         http = PoolManager()
         self.addCleanup(http.clear)
@@ -125,6 +136,20 @@ class TestPoolManager(HTTPDummyServerTes
         self.assertNotIn('X-API-Secret', data)
         self.assertEqual(data['Authorization'], 'bar')
 
+        r = http.request('GET', '%s/redirect' % self.base_url,
+                         fields={'target': '%s/headers' % self.base_url_alt},
+                         headers={'x-api-secret': 'foo',
+                                  'authorization': 'bar'},
+                         retries=Retry(remove_headers_on_redirect=['X-API-Secret']))
+
+        self.assertEqual(r.status, 200)
+
+        data = json.loads(r.data.decode('utf-8'))
+
+        self.assertNotIn('x-api-secret', data)
+        self.assertNotIn('X-API-Secret', data)
+        self.assertEqual(data['Authorization'], 'bar')
+
     def test_missing_port(self):
         # Can a URL that lacks an explicit port like ':80' succeed, or
         # will all such URLs fail with an error?
