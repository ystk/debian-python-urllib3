Backport of:

From 1dd69c5c5982fae7c87a620d487c2ebf7a6b436b Mon Sep 17 00:00:00 2001
From: Seth Michael Larson <sethmichaellarson@gmail.com>
Date: Mon, 17 Feb 2020 15:34:48 -0600
Subject: [PATCH] Raise ValueError if method contains control characters
 (#1800)

---
 test/with_dummyserver/test_connectionpool.py |    7 +++++++
 urllib3/connection.py                        |   14 ++++++++++++++
 2 files changed, 21 insertions(+)

#diff --git a/CHANGES.rst b/CHANGES.rst
#index dbbf6949d..888b777ea 100644
#--- a/CHANGES.rst
#+++ b/CHANGES.rst
#@@ -1,6 +1,13 @@
# Changes
# =======
# 
#+master (dev)
#+------------
#+
#+* Raise ``ValueError`` if control characters are given in
#+  the ``method`` parameter of ``HTTPConnection.request()`` (Pull #1800)
#+
#+
# 1.25.8 (2020-01-20)
# -------------------
# 
--- a/urllib3/connection.py
+++ b/urllib3/connection.py
@@ -1,3 +1,4 @@
+import re
 import datetime
 import sys
 import socket
@@ -58,6 +59,8 @@ port_by_scheme = {
 
 RECENT_DATE = datetime.date(2014, 1, 1)
 
+_CONTAINS_CONTROL_CHAR_RE = re.compile(r"[^-!#$%&'*+.^_`|~0-9a-zA-Z]")
+
 
 class HTTPConnection(_HTTPConnection, object):
     """
@@ -154,6 +157,17 @@ class HTTPConnection(_HTTPConnection, ob
         conn = self._new_conn()
         self._prepare_conn(conn)
 
+    def putrequest(self, method, url, *args, **kwargs):
+        """Send a request to the server"""
+        match = _CONTAINS_CONTROL_CHAR_RE.search(method)
+        if match:
+            raise ValueError(
+                "Method cannot contain non-token characters %r (found at least %r)"
+                % (method, match.group())
+            )
+
+        return _HTTPConnection.putrequest(self, method, url, *args, **kwargs)
+
 
 class HTTPSConnection(HTTPConnection):
     default_port = port_by_scheme['https']
--- a/test/with_dummyserver/test_connectionpool.py
+++ b/test/with_dummyserver/test_connectionpool.py
@@ -4,6 +4,7 @@ import socket
 import sys
 import unittest
 import time
+import pytest
 
 import mock
 
@@ -590,6 +591,12 @@ class TestConnectionPool(HTTPDummyServer
         pool = HTTPConnectionPool('thishostdoesnotexist.invalid', self.port, timeout=0.001)
         self.assertRaises(MaxRetryError, pool.request, 'GET', '/test', retries=2)
 
+    def test_invalid_method_not_allowed(self):
+        for char in [" ", "\r", "\n", "\x00"]:
+            with pytest.raises(ValueError):
+                with HTTPConnectionPool(self.host, self.port) as pool:
+                    pool.request("GET" + char, "/")
+
     def test_source_address(self):
         for addr in VALID_SOURCE_ADDRESSES:
             pool = HTTPConnectionPool(self.host, self.port,
