From: Seth Michael Larson <sethmichaellarson@gmail.com>
Date: Mon, 2 Oct 2023 11:43:46 -0500
Subject: Backport GHSA-v845-jxx5-vc9f

Co-authored-by: Quentin Pradet <quentin.pradet@gmail.com>
Co-authored-by: Illia Volochii <illia.volochii@gmail.com>
Origin: https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb
Bug: https://github.com/urllib3/urllib3/security/advisories/GHSA-v845-jxx5-vc9f
Bug: https://github.com/urllib3/urllib3/pull/3139
Bug-Debian: https://security-tracker.debian.org/tracker/CVE-2023-43804
Bug-Debian: https://bugs.debian.org/1053626
---
 test/test_retry.py                        |    2 +-
 test/with_dummyserver/test_poolmanager.py |   18 +++++++++++++-----
 urllib3/util/retry.py                     |    2 +-
 3 files changed, 15 insertions(+), 7 deletions(-)

--- a/urllib3/util/retry.py
+++ b/urllib3/util/retry.py
@@ -111,7 +111,7 @@ class Retry(object):
     DEFAULT_METHOD_WHITELIST = frozenset([
         'HEAD', 'GET', 'PUT', 'DELETE', 'OPTIONS', 'TRACE'])
 
-    DEFAULT_REDIRECT_HEADERS_BLACKLIST = frozenset(['Authorization'])
+    DEFAULT_REDIRECT_HEADERS_BLACKLIST = frozenset(['Cookie', 'Authorization'])
 
     #: Maximum backoff time.
     BACKOFF_MAX = 120
--- a/test/test_retry.py
+++ b/test/test_retry.py
@@ -158,7 +158,7 @@ class RetryTest(unittest.TestCase):
     def test_retry_default_remove_headers_on_redirect(self):
         retry = Retry()
 
-        assert list(retry.remove_headers_on_redirect) == ['authorization']
+        assert retry.remove_headers_on_redirect == {'authorization', 'cookie'}
 
     def test_retry_set_remove_headers_on_redirect(self):
         retry = Retry(remove_headers_on_redirect=['X-API-Secret'])
--- a/test/with_dummyserver/test_poolmanager.py
+++ b/test/with_dummyserver/test_poolmanager.py
@@ -85,17 +85,18 @@ class TestPoolManager(HTTPDummyServerTes
 
         r = http.request('GET', '%s/redirect' % self.base_url,
                          fields={'target': '%s/headers' % self.base_url_alt},
-                         headers={'Authorization': 'foo'})
+                         headers={'Authorization': 'foo', 'Cookie': 'foo=bar'})
 
         self.assertEqual(r.status, 200)
 
         data = json.loads(r.data.decode('utf-8'))
 
         self.assertNotIn('Authorization', data)
+        self.assertNotIn('Cookie', data)
 
         r = http.request('GET', '%s/redirect' % self.base_url,
                          fields={'target': '%s/headers' % self.base_url_alt},
-                         headers={'authorization': 'foo'})
+                         headers={'authorization': 'foo', 'cookie': 'foo=bar'})
 
         self.assertEqual(r.status, 200)
 
@@ -103,6 +104,8 @@ class TestPoolManager(HTTPDummyServerTes
 
         self.assertNotIn('authorization', data)
         self.assertNotIn('Authorization', data)
+        self.assertNotIn('cookie', data)
+        self.assertNotIn('Cookie', data)
 
     def test_redirect_cross_host_no_remove_headers(self):
         http = PoolManager()
@@ -110,7 +113,7 @@ class TestPoolManager(HTTPDummyServerTes
 
         r = http.request('GET', '%s/redirect' % self.base_url,
                          fields={'target': '%s/headers' % self.base_url_alt},
-                         headers={'Authorization': 'foo'},
+                         headers={'Authorization': 'foo', 'Cookie': 'foo=bar'},
                          retries=Retry(remove_headers_on_redirect=[]))
 
         self.assertEqual(r.status, 200)
@@ -118,6 +121,7 @@ class TestPoolManager(HTTPDummyServerTes
         data = json.loads(r.data.decode('utf-8'))
 
         self.assertEqual(data['Authorization'], 'foo')
+        self.assertEqual(data['Cookie'], 'foo=bar')
 
     def test_redirect_cross_host_set_removed_headers(self):
         http = PoolManager()
@@ -126,7 +130,8 @@ class TestPoolManager(HTTPDummyServerTes
         r = http.request('GET', '%s/redirect' % self.base_url,
                          fields={'target': '%s/headers' % self.base_url_alt},
                          headers={'X-API-Secret': 'foo',
-                                  'Authorization': 'bar'},
+                                  'Authorization': 'bar',
+                                  'Cookie': 'foo=bar'},
                          retries=Retry(remove_headers_on_redirect=['X-API-Secret']))
 
         self.assertEqual(r.status, 200)
@@ -135,11 +140,13 @@ class TestPoolManager(HTTPDummyServerTes
 
         self.assertNotIn('X-API-Secret', data)
         self.assertEqual(data['Authorization'], 'bar')
+        self.assertEqual(data['Cookie'], 'foo=bar')
 
         r = http.request('GET', '%s/redirect' % self.base_url,
                          fields={'target': '%s/headers' % self.base_url_alt},
                          headers={'x-api-secret': 'foo',
-                                  'authorization': 'bar'},
+                                  'authorization': 'bar',
+                                  'cookie': 'foo=bar'},
                          retries=Retry(remove_headers_on_redirect=['X-API-Secret']))
 
         self.assertEqual(r.status, 200)
@@ -149,6 +156,7 @@ class TestPoolManager(HTTPDummyServerTes
         self.assertNotIn('x-api-secret', data)
         self.assertNotIn('X-API-Secret', data)
         self.assertEqual(data['Authorization'], 'bar')
+        self.assertEqual(data['Cookie'], 'foo=bar')
 
     def test_missing_port(self):
         # Can a URL that lacks an explicit port like ':80' succeed, or
