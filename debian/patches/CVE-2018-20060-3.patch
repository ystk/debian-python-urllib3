From 48dba048081dfcb999afcda715d17147aa15b6ea Mon Sep 17 00:00:00 2001
From: SethMichaelLarson <sethmichaellarson@protonmail.com>
Date: Sun, 25 Mar 2018 20:31:10 -0500
Subject: [PATCH] Add Authentication strip logic to PoolManager

---
 test/with_dummyserver/test_poolmanager.py |   30 ++++++++++++++++++++++++++++++
 urllib3/poolmanager.py                    |   13 ++++++++++++-
 2 files changed, 42 insertions(+), 1 deletion(-)

--- a/test/with_dummyserver/test_poolmanager.py
+++ b/test/with_dummyserver/test_poolmanager.py
@@ -6,6 +6,7 @@ from dummyserver.testcase import (HTTPDu
 from urllib3.poolmanager import PoolManager
 from urllib3.connectionpool import port_by_scheme
 from urllib3.exceptions import MaxRetryError, SSLError
+from urllib3.util.retry import Retry
 
 
 class TestPoolManager(HTTPDummyServerTestCase):
@@ -78,6 +79,35 @@ class TestPoolManager(HTTPDummyServerTes
 
         self.assertEqual(r._pool.host, self.host_alt)
 
+    def test_redirect_cross_host_strip_auth_headers(self):
+        http = PoolManager()
+        self.addCleanup(http.clear)
+
+        r = http.request('GET', '%s/redirect' % self.base_url,
+                         fields={'target': '%s/headers' % self.base_url_alt},
+                         headers={'Authentication': 'foo'})
+
+        self.assertEqual(r.status, 200)
+
+        data = json.loads(r.data.decode('utf-8'))
+
+        self.assertNotIn('Authentication', data)
+
+    def test_redirect_cross_host_forward_auth_headers(self):
+        http = PoolManager()
+        self.addCleanup(http.clear)
+
+        r = http.request('GET', '%s/redirect' % self.base_url,
+                         fields={'target': '%s/headers' % self.base_url_alt},
+                         headers={'Authentication': 'foo'},
+                         retries=Retry(forward_auth_headers_across_hosts=True))
+
+        self.assertEqual(r.status, 200)
+
+        data = json.loads(r.data.decode('utf-8'))
+
+        self.assertEqual(data['Authentication'], 'foo')
+
     def test_missing_port(self):
         # Can a URL that lacks an explicit port like ':80' succeed, or
         # will all such URLs fail with an error?
--- a/urllib3/poolmanager.py
+++ b/urllib3/poolmanager.py
@@ -144,8 +144,11 @@ class PoolManager(RequestMethods):
 
         kw['assert_same_host'] = False
         kw['redirect'] = False
+
         if 'headers' not in kw:
-            kw['headers'] = self.headers
+            kw['headers'] = headers = self.headers
+        else:
+            headers = kw['headers']
 
         if self.proxy is not None and u.scheme == "http":
             response = conn.urlopen(method, url, **kw)
@@ -167,8 +170,16 @@ class PoolManager(RequestMethods):
         if not isinstance(retries, Retry):
             retries = Retry.from_int(retries, redirect=redirect)
 
+        # Strip the Authentication header if redirecting to a new host
+        # and we don't want to forward that header across hosts.
+        if (not retries.forward_auth_headers_across_hosts
+                and 'Authentication' in headers
+                and not conn.is_same_host(redirect_location)):
+            headers.pop('Authentication')
+
         kw['retries'] = retries.increment(method, redirect_location)
         kw['redirect'] = redirect
+        kw['headers'] = headers
 
         log.info("Redirecting %s -> %s" % (url, redirect_location))
         return self.urlopen(method, redirect_location, **kw)
